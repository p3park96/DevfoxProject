<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
 
	<!--<context:component-scan base-package="polymorphism"></context:component-scan>-->
	<context:component-scan base-package="com.globalin.biz"></context:component-scan>
	
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!--<bean class="polymorphism.AppleSpeaker"></bean>-->
	<!-- 
	<bean id="log" class="com.globalin.biz.common.LogAdvice"></bean>
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.globalin.biz..*Impl.*(..))" />	
		<aop:aspect ref="log">
			<aop:before method="printLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
	</aop:config>
	-->
	
	<!-- 
	<bean id="log" class="com.globalin.biz.common.Log4jAdvice"></bean>
	<bean id="before" class="com.globalin.biz.common.BeforeAdvice"></bean>
	<bean id="afterReturning" class="com.globalin.biz.common.AfterReturningAdvice"></bean>
	<bean id="afterThrowing" class="com.globalin.biz.common.AfterThrowingAdvice"></bean>
	<bean id="after" class="com.globalin.biz.common.AfterAdvice"></bean>
	<bean id="around" class="com.globalin.biz.common.AroundAdvice"></bean>
	-->
	
	<!-- 
	<aop:config>
	
		<aop:pointcut id="allPointcut" expression="execution(* com.globalin.biz..*Impl.*(..))" />	
		
		<aop:pointcut id="getPointcut" expression="execution(* com.globalin.biz..*Impl.get*(..))" />
		
		<aop:aspect ref="log">
			<aop:before method="printLogging" pointcut-ref="allPointcut" />
		</aop:aspect>
			
		<aop:aspect ref="before">
			<aop:before method="beforeLog" pointcut-ref="allPointcut" />
		</aop:aspect>
		
		<aop:aspect ref="afterReturning">
			<aop:after-returning method="afterLog" pointcut-ref="getPointcut" returning="returnObj" />
		</aop:aspect>
		
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing method="exceptionLog" pointcut-ref="allPointcut" throwing="exceptionObj" />
		</aop:aspect>
		
		<aop:aspect ref="after">
			<aop:after method="finallyLog" pointcut-ref="allPointcut" />
		</aop:aspect>
		
		<aop:aspect ref="around">
			<aop:around method="aroundLog" pointcut-ref="allPointcut" />
		</aop:aspect>
		
	</aop:config>
	-->
	
	<!-- 
		expression="execution(* com.globalin.biz..*Impl.*(..))"
		
		*					:	리턴타입 
		com.globalin.biz..	:	패키지경로
		* Impl				:	클래스명 (대소문자 구분함)
		*(..)				:	메소드명 및 매개변수
	-->

	<!-- DataSource 설정 -->
	<context:property-placeholder location="classpath:config/database.properties"  />
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- sessionFactory 설정 (Mybatis Bean 설정) -->
	<!-- SpringMybatis 첫번째 연동 방법
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:sql-map-config.xml" />
	</bean>
	-->
	
	<!-- SpringMybatis 두번째 연동 방법 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:sql-map-config.xml" />
	</bean>
	
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.globalin.biz..*Impl.*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
<!-- 
	<bean id="userService" class="com.globalin.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO">
		</property>
	</bean>
	
	<bean id="userDAO" class="com.globalin.biz.user.impl.UserDAO"></bean>
-->
<!-- 
	<bean id="collectionBean" class="com.globalin_ioc.injection.CollectionBean">
		<property name="addressList">
-->
			<!-- 
			<list>
				<value>서울특별시 강남구 역삼동</value>
				<value>서울특별시 영등포구 당산동</value>
			</list>
			-->
			
			<!-- 
			<set value-type="java.lang.String">
				<value>서울특별시 강남구 역삼동</value>
				<value>서울특별시 영등포구 당산동</value>
			</set>
			-->
			
			<!-- 
			<map>
				<entry>
					<key>
						<value>홍길동</value>
					</key>	
						<value>서울특별시 강남구 역삼동</value>	
				</entry>
				<entry>
					<key>
						<value>이순신</value>
					</key>	
						<value>서울특별시 영등포구 당산동</value>	
				</entry>
			</map>
			-->
<!-- 			
			<props>
				<prop key="홍길동">서울특별시 강남구 역삼동</prop>
				<prop key="이순신">서울특별시 영등포구 당산동</prop>
			</props>
		</property>
	</bean>
-->


<!--<bean id="tv" class="polymorphism.LgTV"></bean>-->
<!--<bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod"></bean>-->
<!--<bean id="tv" class="polymorphism.SamsungTV" lazy-init="true"></bean>-->
<!--<bean id="tv" class="polymorphism.SamsungTV" scope="singleton">-->
		<!-- 
		<constructor-arg index="1" value="27000000"></constructor-arg>
		<constructor-arg index="0" ref="apple"></constructor-arg>
		-->
<!-- 
		<property name="speaker" ref="apple"></property>
		<property name="price" value="27000000"></property>
	</bean>
	
	
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>
	<bean id="apple" class="polymorphism.AppleSpeaker"></bean>
-->





</beans>
